{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# DevJrBr - Python do Início\n",
        "## Encontro 2 - Tipos de dados embutidos\n",
        "- `boolean`\n",
        "- Numéricos\n",
        "   - `int`: inteiros\n",
        "   - `float`: ponto flutuante\n",
        "   - `complex`: números complexos\n",
        "- Tipos sequências\n",
        "   - `list`\n",
        "   - `tuple`\n",
        "   - `range`\n",
        "- `string`\n",
        "- Tipos conjuntos\n",
        "   - `set`\n",
        "   - `frozenset`\n",
        "- Mapa\n",
        "   - `dict`\n",
        "\n",
        "## Links úteis\n",
        "\n",
        "- Documentação Oficial Python 3\n",
        "  - [Tipos embutidos](https://docs.python.org/pt-br/3/library/stdtypes.html)\n",
        "  - [Duck Typing](https://docs.python.org/pt-br/3/glossary.html?highlight=duck%20typing#term-duck-typing)\n",
        "- [Python Data Structures with Primitive & Non-Primitive Examples | DataCamp](https://www.datacamp.com/tutorial/data-structures-python)\n",
        "- [Tipos de Variáveis disponíveis no Python - python academy](https://pythonacademy.com.br/blog/tipos-de-variaveis-no-python)\n",
        "- [Tutorial: Why Functions Modify Lists and Dictionaries in Python](https://www.dataquest.io/blog/tutorial-functions-modify-lists-dictionaries-python/)\n"
      ],
      "metadata": {
        "id": "lYm2CZG3xwEF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Boolean"
      ],
      "metadata": {
        "id": "JMXl2izrs5EL"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wapS1sxIxiEc",
        "outputId": "f2788f08-ae51-4ed2-dde9-e4f6cac809c5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\"or\" é OU:\n",
            "    False OU False == False\n",
            "    False OU True == True\n",
            "    True OU True == True\n",
            "\"and\" é E:\n",
            "    False E False == False\n",
            "    False E True == True\n",
            "    True E True == True\n",
            "\"not\" é NÃO:\n",
            "   NÃO False == True\n",
            "   NÃO == True False\n"
          ]
        }
      ],
      "source": [
        "# boolean\n",
        "## e exemplos de operaçoes com boolean\n",
        "a = True\n",
        "b = False\n",
        "\n",
        "print('\"or\" é OU:')\n",
        "print('   ', False, 'OU', False, '==', False or False)\n",
        "print('   ', False, 'OU', True, '==', False or True)\n",
        "print('   ', True, 'OU', True, '==', True or True)\n",
        "\n",
        "a_e_b = a and b\n",
        "print('\"and\" é E:')\n",
        "print('   ', False, 'E', False, '==', False or False)\n",
        "print('   ', False, 'E', True, '==', False or True)\n",
        "print('   ', True, 'E', True, '==', True or True)\n",
        "\n",
        "print('\"not\" é NÃO:')\n",
        "nao_a = not a\n",
        "print('   NÃO', False, '==', not False)\n",
        "nao_b = not b\n",
        "print('   NÃO', '==', True, not True)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# comparações\n",
        "## operações de comparação resultam em valores 'boolean' (True, False)\n",
        "mundiais_inter = 1\n",
        "mundiais_gremio = 0\n",
        "inter_mais_mundiais_gremio = mundiais_inter > mundiais_gremio\n",
        "print('Inter tem mais mundiais do que o Grêmio?', inter_mais_mundiais_gremio)\n",
        "\n",
        "mundiais_palmeiras = 0\n",
        "palmeiras_menos_mundiais_inter = mundiais_palmeiras < mundiais_inter\n",
        "print('Palmeiras tem menos mundiais do que o Inter?', palmeiras_menos_mundiais_inter)\n",
        "\n",
        "gremio_nao_tem_mundial = mundiais_gremio == 0\n",
        "print('Grêmio não tem mundial?', gremio_nao_tem_mundial)\n",
        "\n",
        "palmeiras_nao_tem_mundial = mundiais_palmeiras >= 1\n",
        "print('Palmeiras tem mundial?', palmeiras_nao_tem_mundial)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OprX7Nr93D1z",
        "outputId": "d94124ef-9f80-42c7-886f-a86dd544991f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inter tem mais mundiais do que o Grêmio? True\n",
            "Palmeiras tem menos mundiais do que o Inter? True\n",
            "Grêmio não tem mundial? True\n",
            "Palmeiras tem mundial? False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tipos numéricos"
      ],
      "metadata": {
        "id": "1pmWHyGBs8f6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Tipos numéricos\n",
        "\n",
        "inteiro = 1\n",
        "ponto_flutuante = 0.3\n",
        "complexo = complex(2, 1)\n",
        "\n",
        "print(inteiro, ponto_flutuante, complexo, sep=', ')\n",
        "\n",
        "print(inteiro, '+', ponto_flutuante, '==', inteiro + ponto_flutuante)\n",
        "\n",
        "print(inteiro, '+', complexo, '==', inteiro + complexo)\n",
        "\n",
        "print(ponto_flutuante, '+', complexo, '==', ponto_flutuante + complexo)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zuoFeyTh31O9",
        "outputId": "965cc0c2-4d06-4a94-a433-ae23037a2f91"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1, 0.3, (2+1j)\n",
            "1 + 0.3 == 1.3\n",
            "1 + (2+1j) == (3+1j)\n",
            "0.3 + (2+1j) == (2.3+1j)\n",
            "Hehehehehehe 0.3 * 3 == 0.8999999999999999\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Problemas da vida real\n",
        "Mais detalhes em https://docs.python.org/3/tutorial/floatingpoint.html"
      ],
      "metadata": {
        "id": "Fhg0A0h9gZ7a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "print('Hehehehehehe', ponto_flutuante, '* 3', '==', ponto_flutuante*3)"
      ],
      "metadata": {
        "id": "i5lJVdvLgSez"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tipos sequências"
      ],
      "metadata": {
        "id": "wyWrGNe_tAs-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Tipos sequências\n",
        "# listas\n",
        "libertadores_inter = [ 2006, 2010, ]\n",
        "libertadores_gremio = [ 1995, 2017, ]\n",
        "libertadores_gauchas = libertadores_inter + libertadores_gremio\n",
        "libertadores_gauchas\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GrC_j9si5N3U",
        "outputId": "63e96c41-a4f7-4cdc-dfc1-2a44a490afd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2006, 2010, 1995, 2017]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tipos sequências\n",
        "# listas (cont)\n",
        "\n",
        "# esqueci uma libertadores empoeirada do Greminho :D\n",
        "# podemos adicionar à lista\n",
        "libertadores_gremio.append(1983)\n",
        "libertadores_gauchas = libertadores_inter + libertadores_gremio\n",
        "libertadores_gauchas\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TFEbJVl_6q0n",
        "outputId": "7b159f30-d69b-43a7-a6dd-51ddf5fe373f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2006, 2010, 1983, 1995, 2017, 1983]"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tipos sequências\n",
        "# tuplas\n",
        "libertadores_inter_tupla = ( 2006, 2010, )\n",
        "libertadores_gremio_tupla = ( 1995, 2017, )\n",
        "libertadores_gauchas_tupla = libertadores_inter_tupla + libertadores_gremio_tupla\n",
        "libertadores_gauchas_tupla"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P2u9siai6C8i",
        "outputId": "1f39abef-7ea8-4f08-fd32-25c0067bed5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2006, 2010, 1995, 2017)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tipos sequências\n",
        "# tuplas (cont)\n",
        "## ops, esqueci mais uma vez aquela libertadores de 1900 e guaraná com rolha\n",
        "libertadores_gremio_tupla.append(1983)\n",
        "libertadores_gauchas_tupla = libertadores_inter_tupla + libertadores_gremio_tupla\n",
        "libertadores_gauchas_tupla"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "JYr2AjTN64Fx",
        "outputId": "133b13bc-fda0-4f12-eb87-3b4fb08bbdaa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-082919165ea2>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Tipos sequências\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m# tuplas (cont)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mlibertadores_gremio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1983\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mlibertadores_gauchas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibertadores_inter\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlibertadores_gremio\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mlibertadores_gauchas\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'append'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tipos sequências\n",
        "# range\n",
        "\n",
        "range_simples = range(10)\n",
        "range_com_inicio = range(1, 10)\n",
        "range_com_inicio_e_passo = range(1, 10, 3)\n",
        "\n",
        "print(range_simples, range_com_inicio, range_com_inicio_e_passo, sep=',')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bUawDb3k7CRa",
        "outputId": "ed8311f6-d651-42f6-a84e-9f7ace2bb531"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "range(0, 10),range(1, 10),range(1, 10, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tipos sequências\n",
        "# range (cont.)\n",
        "print(3 in range_simples)\n",
        "print(3 in range_com_inicio_e_passo)\n",
        "\n",
        "print(range_simples[:3])\n",
        "print(range_simples[5])\n",
        "print(list(range_com_inicio_e_passo))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MeDyljad7sid",
        "outputId": "7a0059d7-7911-4031-c177-cf6b6dbd9540"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "range(0, 3)\n",
            "5\n",
            "[1, 4, 7]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tipos sequências\n",
        "# metodos padrão\n",
        "\n",
        "titulos_gauchos_inter = (\n",
        "    1927, 1934, 1940, 1941, 1942, 1943, 1944, 1945, 1947, 1948,\n",
        "    1950, 1951, 1952, 1953, 1955, 1961, 1969, 1970, 1971, 1972,\n",
        "    1973, 1974, 1975, 1976, 1978, 1981, 1982, 1983, 1984, 1991,\n",
        "    1992, 1994, 1997, 2002, 2003, 2004, 2005, 2008, 2009, 2011,\n",
        "    2012, 2013, 2014, 2015, 2016,\n",
        ")\n",
        "titulos_gauchos_gremio = [\n",
        "    1921, 1922, 1926, 1931, 1932, 1946, 1949, 1956, 1957, 1958,\n",
        "    1959, 1960, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1977,\n",
        "    1979, 1980, 1985, 1986, 1987, 1988, 1989, 1990, 1993, 1995,\n",
        "    1996, 1999, 2001, 2006, 2007, 2010, 2018, 2019, 2020, 2021,\n",
        "    2022, 2023,\n",
        "]\n",
        "\n",
        "# len - tamanho\n",
        "print('Quantidade de títulos.', 'Inter:', len(titulos_gauchos_inter), 'Grêmio:', len(titulos_gauchos_gremio))\n",
        "\n",
        "# min - menor valor\n",
        "print('Primeiro título.', 'Inter:', min(titulos_gauchos_inter), 'Grêmio:', min(titulos_gauchos_gremio))\n",
        "\n",
        "# max - maior valor\n",
        "print('Último título.', 'Inter:', max(titulos_gauchos_inter), 'Grêmio:', max(titulos_gauchos_gremio))\n",
        "\n",
        "# in - contém elemento X\n",
        "campeao_de_tudo = 'campeão de tudo'\n",
        "feitos_do_inter = ('campeão brasileiro invicto', campeao_de_tudo, )\n",
        "feitos_do_gremio = ('tri rebaixado', 'nenhum chute a gol contra o Real Madrid', )\n",
        "\n",
        "print('Inter é campeão de tudo?', campeao_de_tudo in feitos_do_inter)\n",
        "print('Grêmio é campeão de tudo?', campeao_de_tudo in feitos_do_gremio)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LBp3V3Z38PUz",
        "outputId": "d5e4747a-10da-47c1-ccf1-f16497bd5e39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Quantidade de títulos. Inter: 45 Grêmio: 42\n",
            "Primeiro título. Inter: 1927 Grêmio: 1921\n",
            "Último título. Inter: 2016 Grêmio: 2023\n",
            "Inter é campeão de tudo? True\n",
            "Grêmio é campeão de tudo? False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Strings"
      ],
      "metadata": {
        "id": "WSGa5_tLtFUc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# string\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "usGVWNtJ0aUG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tipos conjuntos (set e frozenset)"
      ],
      "metadata": {
        "id": "oqYZxddjtIYl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Tipos conjuntos\n",
        "## set\n",
        "## frozenset"
      ],
      "metadata": {
        "id": "-zhdW6wR0a6i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tipo mapa (dict)"
      ],
      "metadata": {
        "id": "-a4DOzvPtMUw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mapa\n",
        "## dict\n",
        "\n",
        "sou_dicionario = {\n",
        "    'chave_string': 0,\n",
        "    1: 1,\n",
        "    b'aaaa': 2,\n",
        "}\n",
        "\n",
        "sou_dicionario['aaaa']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W6CMp86U0c_q",
        "outputId": "9b9ce534-7398-4e1f-a755-04f390ddd412"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Valores padrão em funções (pegadinha da vida real)"
      ],
      "metadata": {
        "id": "JoERFrngtPZS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Problema famoso com valores padrão de funções e dados mutáveis"
      ],
      "metadata": {
        "id": "1Vaa6BG33UQi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Cuidados da vida real\n",
        "\n",
        "def func_decora_dict(chave, valor, dict_decorar={}):\n",
        "  dict_decorar[chave] = valor\n",
        "  return dict_decorar\n",
        "\n",
        "func_decora_dict('teste', 1)"
      ],
      "metadata": {
        "id": "k71BEtKc8vjQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c1c23583-98e6-4ea6-d1ad-74726e5c52a3"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'teste': 1}"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "func_decora_dict('teste2', 2)"
      ],
      "metadata": {
        "id": "Ub6bC6h5zEbp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "930a4ea0-71c3-44e5-88cc-3d02077e725a"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'teste': 1, 'teste2': 2}"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def func_decora_dict_corretamente(chave, valor, dict_decorar=None):\n",
        "  dict_decorar = dict_decorar or {}\n",
        "  dict_decorar[chave] = valor\n",
        "  return dict_decorar\n",
        "\n",
        "func_decora_dict_corretamente('teste', 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kqTUZ6w81MVT",
        "outputId": "6f50c433-c7da-4a3f-f0c7-87792092094d"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'teste': 1}"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "func_decora_dict_corretamente('teste2', 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lj4ClQ1r1UTH",
        "outputId": "34b4978d-29c4-48d8-855b-8a4786d21ba8"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'teste2': 2}"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def func_lista(*args, lista_default=[]):\n",
        "  lista_default.extend(args)\n",
        "  return lista_default\n",
        "\n",
        "func_lista('teste', 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "db-sfl951WrJ",
        "outputId": "d3df344e-1915-4697-f741-871bd974a29f"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['teste', 1]"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "func_lista('teste2', 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VuIQ8JPW1kAR",
        "outputId": "50e169d3-d5f5-4d85-e206-82c1fe27b56c"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['teste', 1, 'teste2', 2]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Esse problema ocorre com listas também"
      ],
      "metadata": {
        "id": "jFmFxDsh1yGc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def func_lista_corretamente(*args, lista_default=None):\n",
        "  lista_default = lista_default or []\n",
        "  lista_default.extend(args)\n",
        "  return lista_default\n",
        "\n",
        "func_lista_corretamente('teste', 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rkW6g_CY1mlV",
        "outputId": "a209b25b-4fbc-49e3-b37f-c7c029e7afa4"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['teste', 1]"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "func_lista_corretamente('teste2', 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VddhWaAG1uWD",
        "outputId": "437d2258-806d-4bf7-da85-b490aef3cda8"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['teste2', 2]"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "c6J_Wnlz1wDE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Por que isso acontece?\n",
        "\n",
        "Algumas classes de coleção são mutáveis. Os métodos que adicionam, subtraem ou reorganizam seus membros no lugar, e não retornam um item específico, nunca retornam a instância da coleção propriamente dita, mas um None.\n",
        "\n",
        "(fonte: documentação oficial)"
      ],
      "metadata": {
        "id": "B8F-RQhs3z-X"
      }
    }
  ]
}
